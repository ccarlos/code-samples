%!PS-Adobe-3.0
%%BoundingBox: 38 24 574 768
%%Title: Enscript Output
%%For: Wesley Mackey,,,,
%%Creator: GNU enscript 1.6.3
%%CreationDate: Fri Jan 29 18:15:03 2010
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 3
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 3
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 3
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 536 def
/d_page_h 744 def
/d_header_x 0 def
/d_header_y 708 def
/d_header_w 536 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 536 def
/d_footer_h 0 def
/d_output_w 536 def
/d_output_h 708 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (draw.perl) def
/fdir () def
/ftail (draw.perl) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (01/29/10) def
/modtimestr (18:15:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
30 695 M (1:) s
48 695 M
(#!/usr/bin/perl) s
30 684 M (2:) s
48 684 M
(# $Id: draw.perl,v 1.2 2010-01-29 18:15:03-08 - - $) s
30 673 M (3:) s
30 662 M (4:) s
48 662 M
(use strict;) s
30 651 M (5:) s
48 651 M
(use warnings;) s
30 640 M (6:) s
48 640 M
(use POSIX qw \(strftime\);) s
30 629 M (7:) s
48 629 M
(use Data::Dumper;) s
30 618 M (8:) s
30 607 M (9:) s
48 607 M
(my $script = $0;) s
24 596 M (10:) s
48 596 M
(my $date = strftime "%a %b %e %H:%M:%S %Z %Y", localtime;) s
24 585 M (11:) s
48 585 M
(my $debug = 0;) s
24 574 M (12:) s
24 563 M (13:) s
48 563 M
($0 =~ s|^\(.*/\)?\([^/]+\)/*$|$2|;) s
24 552 M (14:) s
48 552 M
(my $exit_status = 0;) s
24 541 M (15:) s
48 541 M
(END{ exit $exit_status; }) s
24 530 M (16:) s
48 530 M
(sub note\(@\){ print STDERR "$0: @_"; };) s
24 519 M (17:) s
48 519 M
($SIG{'__WARN__'} = sub{ note @_;; $exit_status = 1; };) s
24 508 M (18:) s
48 508 M
($SIG{'__DIE__'} = sub{ warn @_; exit; };) s
24 497 M (19:) s
24 486 M (20:) s
48 486 M
(sub startpage \($\) {) s
24 475 M (21:) s
48 475 M
(   my \($state\) = @_;) s
24 464 M (22:) s
48 464 M
(   my $outfile = $state->{OUTFILE};) s
24 453 M (23:) s
48 453 M
(   print $outfile) s
24 442 M (24:) s
48 442 M
(      "%%Page: $state->{PAGENR} $state->{PAGENR}\\n",) s
24 431 M (25:) s
48 431 M
(      "18 18 translate\\n",) s
24 420 M (26:) s
48 420 M
(      "/Courier findfont 10 scalefont setfont\\n",) s
24 409 M (27:) s
48 409 M
(      "0 0 moveto \($state->{INFILENAME}:$state->{PAGENR}\) show\\n";) s
24 398 M (28:) s
48 398 M
(}) s
24 387 M (29:) s
24 376 M (30:) s
48 376 M
(sub endpage \($\) {) s
24 365 M (31:) s
48 365 M
(   my \($state\) = @_;) s
24 354 M (32:) s
48 354 M
(   my $outfile = $state->{OUTFILE};) s
24 343 M (33:) s
48 343 M
(   print $outfile) s
24 332 M (34:) s
48 332 M
(      "showpage\\n",) s
24 321 M (35:) s
48 321 M
(      "grestoreall\\n";) s
24 310 M (36:) s
48 310 M
(}) s
24 299 M (37:) s
24 288 M (38:) s
48 288 M
(sub prolog \($\) {) s
24 277 M (39:) s
48 277 M
(   my \($state\) = @_;) s
24 266 M (40:) s
48 266 M
(   my $outfile = $state->{OUTFILE};) s
24 255 M (41:) s
48 255 M
(   print $outfile) s
24 244 M (42:) s
48 244 M
(      "%!PS-Adobe-3.0\\n",) s
24 233 M (43:) s
48 233 M
(      "%%Creator: $script\\n",) s
24 222 M (44:) s
48 222 M
(      "%%CreationDate: $date\\n",) s
24 211 M (45:) s
48 211 M
(      "%%PageOrder: Ascend\\n",) s
24 200 M (46:) s
48 200 M
(      "%%Orientation: Portrait\\n",) s
24 189 M (47:) s
48 189 M
(      "%%SourceFile: $state->{INFILENAME}\\n",) s
24 178 M (48:) s
48 178 M
(      "%%EndComments\\n";) s
24 167 M (49:) s
48 167 M
(   $state->{PAGENR} = 1;) s
24 156 M (50:) s
48 156 M
(   startpage $state;) s
24 145 M (51:) s
48 145 M
(}) s
24 134 M (52:) s
24 123 M (53:) s
48 123 M
(sub epilog \($\) {) s
24 112 M (54:) s
48 112 M
(   my \($state\) = @_;) s
24 101 M (55:) s
48 101 M
(   my $outfile = $state->{OUTFILE};) s
24 90 M (56:) s
48 90 M
(   endpage $state;) s
24 79 M (57:) s
48 79 M
(   print $outfile) s
24 68 M (58:) s
48 68 M
(      "%%Trailer\\n",) s
24 57 M (59:) s
48 57 M
(      "%%Pages: $state->{PAGENR}\\n",) s
24 46 M (60:) s
48 46 M
(      "%%EOF\\n",) s
24 35 M (61:) s
48 35 M
(}) s
24 24 M (62:) s
24 13 M (63:) s
48 13 M
(sub error \($;$\) {) s
24 2 M (64:) s
48 2 M
(   my \($state, $message\) = @_;) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (draw.perl) def
/fdir () def
/ftail (draw.perl) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (01/29/10) def
/modtimestr (18:15:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
24 695 M (65:) s
48 695 M
(   $message = "syntax error" unless $message;) s
24 684 M (66:) s
48 684 M
(   warn "$state->{INFILENAME}: $.: $message\\n";) s
24 673 M (67:) s
48 673 M
(}) s
24 662 M (68:) s
24 651 M (69:) s
48 651 M
(sub numeric \($\) {) s
24 640 M (70:) s
48 640 M
(   my \($number\) = @_;) s
24 629 M (71:) s
48 629 M
(   return $number =~ m/^[+-]?\(\\d+\\.?\\d*|\\.\\d+\)\([Ee][+-]?\\d+\)?$/;) s
24 618 M (72:) s
48 618 M
(}) s
24 607 M (73:) s
24 596 M (74:) s
48 596 M
(sub numbers \($$\) {) s
24 585 M (75:) s
48 585 M
(   my \($count, $numbers\) = @_;) s
24 574 M (76:) s
48 574 M
(   return 0 if $count != @$numbers and $count > 0;) s
24 563 M (77:) s
48 563 M
(   return ! grep {! numeric $_} @$numbers;) s
24 552 M (78:) s
48 552 M
(}) s
24 541 M (79:) s
24 530 M (80:) s
48 530 M
(sub make_text \($$\) {) s
24 519 M (81:) s
48 519 M
(   my \($state, $words\) = @_;) s
24 508 M (82:) s
48 508 M
(   my $size = \(numeric $words->[0]\) ? \(shift @$words\) : 12;) s
24 497 M (83:) s
48 497 M
(   my $font = shift @$words;) s
24 486 M (84:) s
48 486 M
(   do {error $state; return} unless @$words >= 1;) s
24 475 M (85:) s
48 475 M
(   my $text = join ' ', @$words;) s
24 464 M (86:) s
48 464 M
(   $text =~ s/[\(\\\\\)]/\\\\$&/g;) s
24 453 M (87:) s
48 453 M
(   my $outfile = $state->{OUTFILE};) s
24 442 M (88:) s
48 442 M
(   return sub {) s
24 431 M (89:) s
48 431 M
(      my \($place\) = @_;) s
24 420 M (90:) s
48 420 M
(      my \($x0, $y0, $angle\) = @$place;) s
24 409 M (91:) s
48 409 M
(      map {$_ *= 72} $x0, $y0;) s
24 398 M (92:) s
48 398 M
(      $angle = 0 unless $angle;) s
24 387 M (93:) s
48 387 M
(      print $outfile) s
24 376 M (94:) s
48 376 M
(            "gsave\\n",) s
24 365 M (95:) s
48 365 M
(            "   /$font findfont\\n",) s
24 354 M (96:) s
48 354 M
(            "   $size scalefont setfont\\n",) s
24 343 M (97:) s
48 343 M
(            "   $x0 $y0 translate\\n",) s
24 332 M (98:) s
48 332 M
(            "   $angle rotate\\n",) s
24 321 M (99:) s
48 321 M
(            "   0 0 moveto\\n",) s
18 310 M (100:) s
48 310 M
(            "   \($text\)\\n",) s
18 299 M (101:) s
48 299 M
(            "   show\\n",) s
18 288 M (102:) s
48 288 M
(            "grestore\\n";) s
18 277 M (103:) s
48 277 M
(   }) s
18 266 M (104:) s
48 266 M
(}) s
18 255 M (105:) s
18 244 M (106:) s
48 244 M
(sub make_ellipse \($$\) {) s
18 233 M (107:) s
48 233 M
(   my \($state, $words\) = @_;) s
18 222 M (108:) s
48 222 M
(   push @$words, 2 unless @$words == 3;) s
18 211 M (109:) s
48 211 M
(   do {error $state; return} unless numbers 3, $words;) s
18 200 M (110:) s
48 200 M
(   my \($height, $width, $thick\) = @$words;) s
18 189 M (111:) s
48 189 M
(   map {$_ *= 72} $height, $width;) s
18 178 M (112:) s
48 178 M
(   do {error $state, "syntax error height"; return} if $height == 0;) s
18 167 M (113:) s
48 167 M
(   my \($xscale, $yscale, $radius\);) s
18 156 M (114:) s
48 156 M
(   if \($height < $width\) {) s
18 145 M (115:) s
48 145 M
(      $xscale = 1;) s
18 134 M (116:) s
48 134 M
(      $yscale = $height / $width;) s
18 123 M (117:) s
48 123 M
(      $radius = $width / 2;) s
18 112 M (118:) s
48 112 M
(   }else {) s
18 101 M (119:) s
48 101 M
(      $xscale = $width / $height;) s
18 90 M (120:) s
48 90 M
(      $yscale = 1;) s
18 79 M (121:) s
48 79 M
(      $radius = $height / 2;) s
18 68 M (122:) s
48 68 M
(   }) s
18 57 M (123:) s
48 57 M
(   my $outfile = $state->{OUTFILE};) s
18 46 M (124:) s
48 46 M
(   return sub {) s
18 35 M (125:) s
48 35 M
(      my \($place\) = @_;) s
18 24 M (126:) s
48 24 M
(      my \($x0, $y0, $angle\) = @$place;) s
18 13 M (127:) s
48 13 M
(      map {$_ *= 72} $x0, $y0, $width;) s
18 2 M (128:) s
48 2 M
(      $angle = 0 unless $angle;) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
38 24 translate
/pagenum 3 def
/fname (draw.perl) def
/fdir () def
/ftail (draw.perl) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (01/29/10) def
/modtimestr (18:15:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
18 695 M (129:) s
48 695 M
(      print $outfile) s
18 684 M (130:) s
48 684 M
(            "gsave\\n",) s
18 673 M (131:) s
48 673 M
(            "   newpath\\n",) s
18 662 M (132:) s
48 662 M
(            "   /save matrix currentmatrix def\\n",) s
18 651 M (133:) s
48 651 M
(            "   $x0 $y0 translate\\n",) s
18 640 M (134:) s
48 640 M
(            "   $angle rotate\\n",) s
18 629 M (135:) s
48 629 M
(            "   $xscale $yscale scale\\n",) s
18 618 M (136:) s
48 618 M
(            "   0 0 $radius 0 360 arc\\n",) s
18 607 M (137:) s
48 607 M
(            "   save setmatrix\\n",) s
18 596 M (138:) s
48 596 M
(            "   $thick setlinewidth\\n",) s
18 585 M (139:) s
48 585 M
(            "   stroke\\n",) s
18 574 M (140:) s
48 574 M
(            "grestore\\n";) s
18 563 M (141:) s
48 563 M
(   }) s
18 552 M (142:) s
48 552 M
(}) s
18 541 M (143:) s
18 530 M (144:) s
48 530 M
(sub make_circle \($$\) {) s
18 519 M (145:) s
48 519 M
(   my \($state, $words\) = @_;) s
18 508 M (146:) s
48 508 M
(   unshift @$words, $words->[0];) s
18 497 M (147:) s
48 497 M
(   return make_ellipse $state, $words;) s
18 486 M (148:) s
48 486 M
(}) s
18 475 M (149:) s
18 464 M (150:) s
48 464 M
(sub make_polygon \($$\) {) s
18 453 M (151:) s
48 453 M
(   my \($state, $words\) = @_;) s
18 442 M (152:) s
48 442 M
(   do {error $state; return} unless @$words >= 2 and numbers 0, $words;) s
18 431 M (153:) s
48 431 M
(   my $thick = \(@$words % 2 == 0\) ? 2 : pop @$words;) s
18 420 M (154:) s
48 420 M
(   my $outfile = $state->{OUTFILE};) s
18 409 M (155:) s
48 409 M
(   return sub {) s
18 398 M (156:) s
48 398 M
(      my \($place\) = @_;) s
18 387 M (157:) s
48 387 M
(      my \($x0, $y0, $angle\) = @$place;) s
18 376 M (158:) s
48 376 M
(      map {$_ *= 72} $x0, $y0;) s
18 365 M (159:) s
48 365 M
(      $angle = 0 unless $angle;) s
18 354 M (160:) s
48 354 M
(      print $outfile) s
18 343 M (161:) s
48 343 M
(            "gsave\\n",) s
18 332 M (162:) s
48 332 M
(            "   newpath\\n",) s
18 321 M (163:) s
48 321 M
(            "   $x0 $y0 translate\\n",) s
18 310 M (164:) s
48 310 M
(            "   $angle rotate\\n",) s
18 299 M (165:) s
48 299 M
(            "   0 0 moveto\\n";) s
18 288 M (166:) s
48 288 M
(      for \(my $gon = 0; $gon < @$words; $gon += 2\) {) s
18 277 M (167:) s
48 277 M
(         my \($xrel, $yrel\) = @{$words}[$gon, $gon + 1];) s
18 266 M (168:) s
48 266 M
(         map {$_ *= 72} $xrel, $yrel;) s
18 255 M (169:) s
48 255 M
(         print $outfile) s
18 244 M (170:) s
48 244 M
(            "   $xrel $yrel rlineto\\n";) s
18 233 M (171:) s
48 233 M
(      }) s
18 222 M (172:) s
48 222 M
(      print $outfile) s
18 211 M (173:) s
48 211 M
(            "   closepath\\n",) s
18 200 M (174:) s
48 200 M
(            "   $thick setlinewidth\\n",) s
18 189 M (175:) s
48 189 M
(            "   stroke\\n",) s
18 178 M (176:) s
48 178 M
(            "grestore\\n";) s
18 167 M (177:) s
48 167 M
(   }) s
18 156 M (178:) s
48 156 M
(}) s
18 145 M (179:) s
18 134 M (180:) s
48 134 M
(sub make_rectangle \($$\) {) s
18 123 M (181:) s
48 123 M
(   my \($state, $words\) = @_;) s
18 112 M (182:) s
48 112 M
(   push @$words, 2 unless @$words == 3;) s
18 101 M (183:) s
48 101 M
(   do {error $state; return} unless numbers 3, $words;) s
18 90 M (184:) s
48 90 M
(   my \($hght, $wid, $thick\) = @$words;) s
18 79 M (185:) s
48 79 M
(   return make_polygon $state, [0, $hght, $wid, 0, 0, - $hght, $thick];) s
18 68 M (186:) s
48 68 M
(}) s
18 57 M (187:) s
18 46 M (188:) s
48 46 M
(sub make_square \($$\) {) s
18 35 M (189:) s
48 35 M
(   my \($state, $words\) = @_;) s
18 24 M (190:) s
48 24 M
(   unshift @$words, $words->[0];) s
18 13 M (191:) s
48 13 M
(   return make_rectangle $state, $words;) s
18 2 M (192:) s
48 2 M
(}) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
38 24 translate
/pagenum 4 def
/fname (draw.perl) def
/fdir () def
/ftail (draw.perl) def
% User defined strings:
/pagenumstr (4) def
/moddatestr (01/29/10) def
/modtimestr (18:15:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
18 695 M (193:) s
18 684 M (194:) s
48 684 M
(sub make_line \($$\) {) s
18 673 M (195:) s
48 673 M
(   my \($state, $words\) = @_;) s
18 662 M (196:) s
48 662 M
(   push @$words, 2 unless @$words == 2;) s
18 651 M (197:) s
48 651 M
(   do {error $state; return} unless numbers 2, $words;) s
18 640 M (198:) s
48 640 M
(   my \($length, $thick\) = @$words;) s
18 629 M (199:) s
48 629 M
(   $thick = 2 unless $thick;) s
18 618 M (200:) s
48 618 M
(   return make_polygon $state, [$words->[0], 0, $thick];) s
18 607 M (201:) s
48 607 M
(}) s
18 596 M (202:) s
18 585 M (203:) s
48 585 M
(my %objects = \() s
18 574 M (204:) s
48 574 M
(   "text" => \\&make_text,) s
18 563 M (205:) s
48 563 M
(   "ellipse" => \\&make_ellipse,) s
18 552 M (206:) s
48 552 M
(   "circle" => \\&make_circle,) s
18 541 M (207:) s
48 541 M
(   "polygon" => \\&make_polygon,) s
18 530 M (208:) s
48 530 M
(   "rectangle" => \\&make_rectangle,) s
18 519 M (209:) s
48 519 M
(   "square" => \\&make_square,) s
18 508 M (210:) s
48 508 M
(   "line" => \\&make_line,) s
18 497 M (211:) s
48 497 M
(\);) s
18 486 M (212:) s
18 475 M (213:) s
48 475 M
(sub do_define \($$\) {) s
18 464 M (214:) s
48 464 M
(   my \($state, $words\) = @_;) s
18 453 M (215:) s
48 453 M
(   do {error $state; return} unless @$words > 2;) s
18 442 M (216:) s
48 442 M
(   my \($name\) = shift @$words;) s
18 431 M (217:) s
48 431 M
(   my \($class\) = shift @$words;) s
18 420 M (218:) s
48 420 M
(   my \($maker\) = $objects{$class};) s
18 409 M (219:) s
48 409 M
(   do {error $state, "no such shape"; return} unless $maker;) s
18 398 M (220:) s
48 398 M
(   my $object = $maker->\($state, $words\);) s
18 387 M (221:) s
48 387 M
(   $state->{SYMTAB}->{$name} = $object if $object;) s
18 376 M (222:) s
48 376 M
(}) s
18 365 M (223:) s
18 354 M (224:) s
48 354 M
(sub do_draw \($$\) {) s
18 343 M (225:) s
48 343 M
(   my \($state, $words\) = @_;) s
18 332 M (226:) s
48 332 M
(   my $object = $state->{SYMTAB}->{shift @$words};) s
18 321 M (227:) s
48 321 M
(   do {error $state, "no such object"; return} unless $object;) s
18 310 M (228:) s
48 310 M
(   push @$words, 0 if @$words == 2;) s
18 299 M (229:) s
48 299 M
(   do {error $state; return} unless numbers 3, $words;) s
18 288 M (230:) s
48 288 M
(   $object->\($words\);) s
18 277 M (231:) s
48 277 M
(}) s
18 266 M (232:) s
18 255 M (233:) s
48 255 M
(sub do_newpage \($$\) {) s
18 244 M (234:) s
48 244 M
(   my \($state, $words\) = @_;) s
18 233 M (235:) s
48 233 M
(   do {error $state; return} unless @$words == 0;) s
18 222 M (236:) s
48 222 M
(   endpage $state;) s
18 211 M (237:) s
48 211 M
(   $state->{PAGENR}++;) s
18 200 M (238:) s
48 200 M
(   startpage $state;) s
18 189 M (239:) s
48 189 M
(}) s
18 178 M (240:) s
18 167 M (241:) s
48 167 M
(my %commands = \() s
18 156 M (242:) s
48 156 M
(   "define" => \\&do_define,) s
18 145 M (243:) s
48 145 M
(   "draw" => \\&do_draw,) s
18 134 M (244:) s
48 134 M
(   "newpage" => \\&do_newpage,) s
18 123 M (245:) s
48 123 M
(\);) s
18 112 M (246:) s
18 101 M (247:) s
48 101 M
(sub parsefile \($\) {) s
18 90 M (248:) s
48 90 M
(   my \($state\) = @_;) s
18 79 M (249:) s
48 79 M
(   prolog $state;) s
18 68 M (250:) s
48 68 M
(   my $infile = $state->{INFILE};) s
18 57 M (251:) s
48 57 M
(   my $outfile = $state->{OUTFILE};) s
18 46 M (252:) s
48 46 M
(   while \(defined \(my $line = <$infile>\)\) {) s
18 35 M (253:) s
48 35 M
(      for \(;;\) {) s
18 24 M (254:) s
48 24 M
(         chomp $line;) s
18 13 M (255:) s
48 13 M
(         last unless $line =~ s/\\\\$//;) s
18 2 M (256:) s
48 2 M
(         my $contin = <$infile>;) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
38 24 translate
/pagenum 5 def
/fname (draw.perl) def
/fdir () def
/ftail (draw.perl) def
% User defined strings:
/pagenumstr (5) def
/moddatestr (01/29/10) def
/modtimestr (18:15:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
18 695 M (257:) s
48 695 M
(         $line .= $contin;) s
18 684 M (258:) s
48 684 M
(      }) s
18 673 M (259:) s
48 673 M
(      chomp $line;) s
18 662 M (260:) s
48 662 M
(      print $outfile "\\n",) s
18 651 M (261:) s
48 651 M
(            "%%Command[$.]: $line\\n";) s
18 640 M (262:) s
48 640 M
(      next if $line =~ m/^\\s*\(#|$\)/;) s
18 629 M (263:) s
48 629 M
(      my @words = split " ", $line;) s
18 618 M (264:) s
48 618 M
(      my $command = $commands{shift @words};) s
18 607 M (265:) s
48 607 M
(      do {error $state; next} unless defined $command;) s
18 596 M (266:) s
48 596 M
(      $command->\($state, \\@words\);) s
18 585 M (267:) s
48 585 M
(   }) s
18 574 M (268:) s
48 574 M
(   epilog $state;) s
18 563 M (269:) s
48 563 M
(}) s
18 552 M (270:) s
18 541 M (271:) s
48 541 M
(sub main \(\) {) s
18 530 M (272:) s
48 530 M
(   @ARGV and $ARGV[0] =~ m/^-D/ and $debug = shift;) s
18 519 M (273:) s
48 519 M
(   unless \(@ARGV\) {) s
18 508 M (274:) s
48 508 M
(      parsefile {INFILENAME => "-",) s
18 497 M (275:) s
48 497 M
(                 INFILE => *STDIN,) s
18 486 M (276:) s
48 486 M
(                 OUTFILE => *STDOUT};) s
18 475 M (277:) s
48 475 M
(   }else {) s
18 464 M (278:) s
48 464 M
(      for my $infilename \(@ARGV\) {) s
18 453 M (279:) s
48 453 M
(         my $outfilename = $infilename;) s
18 442 M (280:) s
48 442 M
(         $outfilename =~ s|^.*/\([^/]+\)/*$|$1|;) s
18 431 M (281:) s
48 431 M
(         $outfilename =~ s/\(\\.dr\)?$/.ps/;) s
18 420 M (282:) s
48 420 M
(         open my $infile, "<$infilename") s
18 409 M (283:) s
48 409 M
(              or warn "$infilename: $!\\n" and next;) s
18 398 M (284:) s
48 398 M
(         open my $outfile, ">$outfilename") s
18 387 M (285:) s
48 387 M
(              or warn "$outfilename: $!\\n" and next;) s
18 376 M (286:) s
48 376 M
(         print "$0: $infilename => $outfilename\\n";) s
18 365 M (287:) s
48 365 M
(         parsefile {INFILENAME => $infilename,) s
18 354 M (288:) s
48 354 M
(                    INFILE => $infile,) s
18 343 M (289:) s
48 343 M
(                    OUTFILE => $outfile};) s
18 332 M (290:) s
48 332 M
(         close $infile;) s
18 321 M (291:) s
48 321 M
(         close $outfile;) s
18 310 M (292:) s
48 310 M
(      }) s
18 299 M (293:) s
48 299 M
(   }) s
18 288 M (294:) s
48 288 M
(}) s
18 277 M (295:) s
18 266 M (296:) s
48 266 M
(main;) s
18 255 M (297:) s
_R
S
%%Trailer
%%Pages: 5
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
