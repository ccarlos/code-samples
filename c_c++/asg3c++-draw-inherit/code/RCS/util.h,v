head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2010.02.05.22.09.12;	author -;	state -;
branches;
next	1.3;

1.3
date	2010.02.05.03.35.22;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.02.03.03.08.59;	author -;	state -;
branches;
next	1.1;

1.1
date	2010.01.30.02.07.32;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@//
// util -
//    A utility class to provide various services not conveniently
//    included in other modules.
//

#ifndef __UTIL_H__
#define __UTIL_H__

#include <iostream>
#include <list>
#include <string>

#ifdef __GNUC__
#include <stdexcept>
#endif

using namespace std;

#include "trace.h"

//
// sys_info -
//    Keep track of execname and exit status.  Must be initialized
//    as the first thing done inside main.  Main should call:
//       sys_info::set_execname (argv[0]);
//    before anything else.
//

class sys_info {
   public:
      static const string &get_execname ();
      static void set_exit_status (int status);
      static int get_exit_status ();
   private:
      friend int main (int argc, char **argv);
      static void set_execname (const string &argv0);
      static string *execname;
      static int exit_status;
};

//
// datestring -
//    Return the current date, as printed by date(1).
//

const string datestring ();

//
// split -
//    Split a string into a list<string>..  Any sequence
//    of chars in the delimiter string is used as a separator.  To
//    Split a pathname, use "/".  To split a shell command, use " ".
//

list<string> split (const string &line, const string &delimiter);

//
// complain -
//    Used for starting error messages.  Sets the exit status to
//    EXIT_FAILURE, writes the program name to cerr, and then
//    returns the cerr ostream.  Example:
//       complain() << filename << ": some problem" << endl;
//

ostream &complain();

//
// syscall_error -
//    Complain about a failed system call.  Argument is the name
//    of the object causing trouble.  The extern errno must contain
//    the reason for the problem.
//

void syscall_error (const string &);

//
// operator<< (list) -
//    An overloaded template operator which allows lists to be
//    printed out as a single operator, each element separated from
//    the next with spaces.  The item_t must have an output operator
//    defined for it.
//

template <typename item_t>
ostream &operator<< (ostream &out, const list<item_t> &vec);

//
// string to_string (thing) -
//    Convert anything into a string if it has an ostream<< operator.
//

template <typename type>
string to_string (const type &);

//
// thing from_string (cons string &) -
//    Scan a string for something if it has an istream>> operator.
//

template <typename type>
type from_string (const string &);

//
// Put the RCS Id string in the object file.
//

RCSH(__util_h__,
"$Id: util.h,v 1.3 2010-02-04 19:35:22-08 - - $")

#endif

@


1.3
log
@-
@
text
@d89 16
d109 1
a109 1
"$Id: util.h,v 1.2 2010-02-02 19:08:59-08 - - $")
@


1.2
log
@-
@
text
@d31 4
d36 3
a38 1
      static string execname;
a39 5
   public:
      static void set_execname (const string &argv0);
      static const string &get_execname () {return execname; }
      static void set_status (int status) {exit_status = status; }
      static int get_status () {return exit_status; }
d93 1
a93 1
"$Id: util.h,v 1.1 2010-01-29 18:07:32-08 - - $")
@


1.1
log
@-
@
text
@d85 1
a85 1
ostream &operator<< (ostream &out, list<item_t> vec);
d92 1
a92 1
"$Id: util.h,v 1.1 2009-02-20 15:04:22-08 - - $")
@
