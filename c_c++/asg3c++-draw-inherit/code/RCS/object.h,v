head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2010.02.05.03.09.00;	author -;	state -;
branches;
next	1.3;

1.3
date	2010.02.04.23.02.29;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.02.04.22.34.19;	author -;	state -;
branches;
next	1.1;

1.1
date	2010.01.30.02.07.32;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@
#ifndef __OBJECT_H__
#define __OBJECT_H__

#include <iomanip>
#include <iostream>
#include <list>
#include <utility>

using namespace std;

#include "numbers.h"

//
// Objects constitute a single-inheritance hierarchy, summarized
// here, with the superclass listed first, and subclasses indented
// under their immediate superclass.
//
// object
//    test
//    shape
//       ellipse
//          circle
//       polygon
//          rectangle
//             square
//          line
//

typedef list<xycoords> coordlist;

//
// Abstract base class for all shapes in this system.
//

class object {
   public:
      virtual ~object ();
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle) = 0;
   protected:
      object () {}
};

//
// Class for printing text.
//

class text: public object {
   public:
      text (const string &fontname, const points &fontsize,
            const string &textdata);
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle);
   protected:
      string fontname;
      points fontsize;
      string textdata;
};

//
// Shape of a geometric object.
//

class shape: public object {
   protected:
      shape (const points &thick): thick(thick) {}
      points thick;
   private:
      shape (); // Disable.
};

//
// Classes for ellipse and circle.
//

class ellipse: public shape {
   public:
      ellipse (const inches &height, const inches &width,
               const points &thick);
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle);
   protected:
      inches height;
      inches width;
};

class circle: public ellipse {
   public:
      circle (const inches &diameter, const points &thick);
};

//
// Class polygon.
//

class polygon: public shape {
   public:
      polygon (const coordlist &coords, const points &thick);
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle);
   protected:
      const coordlist coordinates;
};

//
// Classes rectangle, square, and line..
//

class rectangle: public polygon {
   public:
      rectangle (const inches &height, const inches &width,
                 const points &thick);
   private:
      static coordlist make_list (
             const inches &height, const inches &width);
};

class square: public rectangle {
   public:
      square (const inches &width, const points &thick);
};

class line: public polygon {
   public:
      line (const inches &length, const points &thick);
   private:
      static coordlist make_list (const inches &length);
};

RCSH(__object_h__,
"$Id: object.h,v 1.3 2010-02-04 15:02:29-08 - - $")

#endif

@


1.3
log
@-
@
text
@d14 16
d132 1
a132 1
"$Id: object.h,v 1.2 2010-02-04 14:34:19-08 - - $")
@


1.2
log
@-
@
text
@a50 1
      shape (); // Disable.
a51 1
   protected:
d53 2
d116 1
a116 1
"$Id: object.h,v 1.1 2010-01-29 18:07:32-08 - - $")
@


1.1
log
@-
@
text
@d25 2
d50 2
a51 1
   public:
d116 1
a116 1
"$Id: object.h,v 1.1 2009-02-20 15:04:22-08 - - $")
@
