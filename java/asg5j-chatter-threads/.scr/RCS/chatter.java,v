head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2011.04.20.06.14.55;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.04.16.06.35.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.04.15.07.37.17;	author -;	state -;
branches;
next	1.1;

1.1
date	2010.02.24.03.35.28;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: chatter.java,v 1.3 2011-04-15 23:35:20-07 - - $

import static java.lang.System.*;

class chatter {

   static class options {
      final String progname = auxlib.PROGNAME;
      final String usage = " [-g] [-@@flags] [hostname:]port username";
      String traceflags;
      boolean client_is_gui = false;
      boolean is_server = true; 
      String server_hostname;
      int server_portnumber;
      String username;

      options (String[] args) {
         try {
            if (args.length < 1 || args.length > 4)  
               throw new NumberFormatException ();
            for (String arg: args) {
               if (arg.equals ("-g")) {
                  client_is_gui = true;
               }else if (arg.contains ("-@@")) {
                  traceflags = arg; 
               }else if (arg.contains (":")) {
                  String[] hostnm_prt = arg.split (":", 2);
                  server_hostname = hostnm_prt[0];
                  server_portnumber = Integer.parseInt (hostnm_prt[1]);
                  is_server = false;
               }else {
                  if (is_server == false) break;
                  server_portnumber = Integer.parseInt (arg); 
                  is_server = true;
               }
            }
            username = args [args.length - 1];
         }catch (NumberFormatException exn) {
            auxlib.usage_exit (usage);
         }
      }
   }

   public static void main (String[] args) {
      options opts = new options (args);

      if (opts.is_server == true) {
         Thread server = new Thread (new server.server_listener (opts));
         server.start ();
      }else if (opts.client_is_gui == true) {
         Thread gui_client = new Thread (new gui.gui_starter (opts));
        // gui_client.setDaemon (true);
         gui_client.start ();
      }else if (opts.client_is_gui == false) {
         Thread client = new Thread (new client.client_starter (opts));
         client.start ();
      }
   }
}
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: chatter.java,v 1.2 2011-04-15 00:37:17-07 - - $
a2 3
//import java.io.*;
//import java.net.*;
//import java.util.*;
d51 3
a53 1

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: chatter.java,v 1.1 2010-02-23 19:35:28-08 - - $
d3 3
a9 17
   //
   // Class message includes the String message and a status.
   // NORMAL: usual case for receipt of message
   // TIMEOUT: polling timed out
   // INTERRUPT: some interrupt other than TIMEOUT
   // EOF: end of file
   //
   static enum status_t {NORMAL, TIMEOUT, INTERRUPT, EOF};
   static class message {
      String data;
      status_t status;
      message (String data, status_t status) {
         this.data = data;
         this.status = status;
      }
   };

d12 1
a12 2
      final String usage = "Usage: " + progname + 
                           " [-g] [-@@flags] [hostname:]port username";
d14 2
a15 2
      boolean client_is_gui;
      boolean is_server;
d19 1
d35 3
a37 1
                  username = arg;
d40 1
d42 1
a42 1
            auxlib.die (usage);
d49 10
a58 2
      Thread ser = new Thread (new server.server_listener (opts));
      ser.start ();
a59 1

@


1.1
log
@-
@
text
@d1 3
a3 1
// $Id: chatter.java,v 1.1 2009-03-03 20:16:58-08 - - $
d7 17
d25 3
d35 20
d60 2
@
