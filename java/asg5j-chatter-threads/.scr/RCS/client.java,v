head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2011.04.20.06.14.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.04.16.06.35.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2010.02.24.03.35.28;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: client.java,v 1.2 2011-04-15 23:35:20-07 - - $

import java.io.*;
import java.net.*;
import java.util.*;
import static java.lang.System.*;

class client {

   static class client_starter implements Runnable {
      chatter.options opts;
      client_starter (chatter.options opts) {
         this.opts = opts;
      }

      public void run () {
         try {
            Socket socket = new Socket (opts.server_hostname,
                                        opts.server_portnumber);
            out.printf ("socket OK%n");
            Thread sender = new Thread (new sender (opts, 
               new PrintWriter (socket.getOutputStream ())));
            Thread listener = new Thread (new listener (opts,
               new Scanner (socket.getInputStream ())));
            sender.start ();
            listener.start ();
         }catch (IOException exn) {
            auxlib.warn (exn);
         }
      }
   }

   static class sender implements Runnable {
      chatter.options opts;
      PrintWriter writer;
      Scanner scanner;
      sender (chatter.options opts, PrintWriter writer) {
         this.opts = opts;
         this.writer = writer;
      }

      public void run () {
         out.printf ("cli sender starting.. %n");
         scanner = new Scanner (System.in);
         writer.printf ("%s: %n", opts.username);
         writer.flush ();
         while (scanner.hasNextLine ()) {
            writer.printf ("%s%n", scanner.nextLine ());
            writer.flush ();
         }
         scanner.close ();
         writer.close ();
         out.printf ("cli sender ending.. %n");
      }
   }

   static class listener implements Runnable {
      chatter.options opts;
      Scanner scanner;
      listener (chatter.options opts, Scanner scanner) {
         this.opts = opts;
         this.scanner = scanner;
      }

      public void run () {
         out.printf ("cli listener starting..%n");
         while (scanner.hasNextLine ()) {
//            if (scanner.nextLine ().equals (null)) continue;
            out.printf ("%s%n", scanner.nextLine ());
         }   
         scanner.close ();
         out.printf ("cli listener ending..%n");
      }
   }
}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: client.java,v 1.1 2010-02-23 19:35:28-08 - - $
d15 1
d41 1
d50 4
a53 4
      }
      scanner.close ();
      writer.close ();
      out.printf ("cli sender ending.. %n");
d64 1
d68 1
a74 1

@


1.1
log
@-
@
text
@d1 6
a6 1
// $Id: client.java,v 1.1 2009-03-03 20:16:58-08 - - $
d10 5
a14 1
   static class receiver implements Runnable {
d16 13
d33 29
d63 6
@
